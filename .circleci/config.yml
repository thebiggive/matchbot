version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.0.0
  aws-ecs: circleci/aws-ecs@2.2.1
  codecov: codecov/codecov@1.1.3
  jira: circleci/jira@1.3.1
  slack: circleci/slack@3.4.2

jobs:
  test: # Also lints first
    # Working directory must match docker-compose mount / Docker `COPY` for real Doctrine proxy
    # generation-dependent tests to work.
    working_directory: /var/www/html
    docker:
      - image: thebiggive/php:dev-8.1
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN
        environment:
          MYSQL_HOST: 127.0.0.1
          MYSQL_SCHEMA: matchbot
          MYSQL_USER: root
          MYSQL_PASSWORD: tbgCircle123

          REDIS_HOST: 127.0.0.1
      - image: cimg/mysql:8.0
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN
        environment:
          MYSQL_DATABASE: matchbot
          MYSQL_ROOT_PASSWORD: tbgCircle123
      - image: redis:6.2
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN

    steps:
      - checkout

      - restore_cache:
          keys:
            - composer-v1-{{ checksum "composer.lock" }}

      - run: composer install --no-interaction

      - save_cache:
          paths:
            - vendor
          key: composer-v1-{{ checksum "composer.lock" }}

      - run: composer run lint:check

      - run: composer run sa:check

      - run: composer run test

      - run: vendor/bin/doctrine-migrations migrate --no-interaction --allow-no-migration --verbose

      - codecov/upload:
          file: 'coverage.xml'

workflows:
  build:
    jobs:
      - test:
          context:
            - docker-hub-creds
            - jira
          post-steps:
            - jira/notify:
                job_type: build
                environment_type: development
            - slack/notify-on-failure: ~

  deploy-regression:
    jobs:
      - test:
          filters:
            branches:
              only:
                - develop
          context:
            - docker-hub-creds
      - aws-ecr/build-and-push-image:
          context:
            - ecs-deploys
          requires:
            - test
          repo: '${AWS_ECR_REPO_NAME}'
          region: AWS_REGION
          tag: 'regression,regression-${CIRCLE_SHA1}'
      - aws-ecs/deploy-service-update:
          context:
            - ecs-deploys
            - jira
          requires:
            - aws-ecr/build-and-push-image
          aws-region: AWS_REGION
          family: 'tbg-regression-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX_WEB}'
          cluster-name: 'tbg-regression-${AWS_REGION}'
          container-image-name-updates: 'container=matchbot_web,tag=regression-${CIRCLE_SHA1}'
          post-steps:
            - slack/notify-on-failure: ~
            - jira/notify:
                job_type: deployment
            - slack/notify:
                color: '#009900'
                message: 'Visitors to regression will see the updated app version in ~20 minutes.'
                title: 'Regression: MatchBot deployed!'

  deploy-staging:
    jobs:
      - test:
          filters:
            branches:
              only:
                - develop
          context:
            - docker-hub-creds
      - aws-ecr/build-and-push-image:
          context:
            - ecs-deploys
          requires:
            - test
          repo: '${AWS_ECR_REPO_NAME}'
          region: AWS_REGION
          tag: 'staging,staging-${CIRCLE_SHA1}'
      - aws-ecs/deploy-service-update:
          context:
            - ecs-deploys
            - jira
          requires:
            - aws-ecr/build-and-push-image
          aws-region: AWS_REGION
          family: 'tbg-staging-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX_WEB}'
          cluster-name: 'tbg-staging-${AWS_REGION}'
          container-image-name-updates: 'container=matchbot_web,tag=staging-${CIRCLE_SHA1}'
          post-steps:
            - slack/notify-on-failure: ~
            - jira/notify:
                job_type: deployment
                environment_type: staging
            - slack/notify:
                color: '#009900'
                message: 'We use rolling blue/green deploys. All visitors to staging will see the updated app version within ~30 minutes.'
                title: 'Staging: MatchBot deployed!'

  deploy-production:
    jobs:
      - test:
          filters:
            branches:
              only:
                - main
          context:
            - docker-hub-creds
      - aws-ecr/build-and-push-image:
          context:
            - ecs-deploys
          requires:
            - test
          repo: '${AWS_ECR_REPO_NAME}'
          region: AWS_REGION
          tag: 'production,production-${CIRCLE_SHA1}'
      - aws-ecs/deploy-service-update:
          context:
            - ecs-deploys
            - jira
          requires:
            - aws-ecr/build-and-push-image
          aws-region: AWS_REGION
          family: 'tbg-production-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX_WEB}'
          cluster-name: 'tbg-production-${AWS_REGION}'
          container-image-name-updates: 'container=matchbot_web,tag=production-${CIRCLE_SHA1}'
          post-steps:
            - slack/notify-on-failure: ~
            - jira/notify:
                job_type: deployment
                environment_type: production
            - slack/notify:
                color: '#009900'
                message: 'We use rolling blue/green deploys. All visitors to production will see the updated app version within ~30 minutes.'
                title: 'Production: MatchBot deployed!'
