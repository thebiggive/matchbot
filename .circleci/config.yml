version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@9.3.1
  aws-ecs: circleci/aws-ecs@4.1.0
  aws-cli: circleci/aws-cli@5.0.0
  codecov: codecov/codecov@5.3.0
  jira: circleci/jira@2.2.0
  slack: circleci/slack@5.1.1

jobs:
  test: # Also lints first
    # Working directory must match docker-compose mount / Docker `COPY` for real Doctrine proxy
    # generation-dependent tests to work.
    working_directory: /var/www/html
    resource_class: large
    docker:
      - image: thebiggive/php:dev-8.3
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN
        environment:
          MYSQL_HOST: 127.0.0.1
          MYSQL_SCHEMA: matchbot
          MYSQL_USER: root
          MYSQL_PASSWORD: tbgCircle123
          SLACK_API_TOKEN: xoxb-slackApiTokenPlaceholder
          MESSENGER_TRANSPORT_DSN: in-memory://
          LOW_PRIORITY_MESSENGER_TRANSPORT_DSN: in-memory://
          STRIPE_SECRET_KEY: stripe_secret_not_set
          REDIS_HOST: 127.0.0.1
          AWS_REGION: eu-west-1
      - image: cimg/mysql:8.0
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN
        environment:
          MYSQL_DATABASE: matchbot
          MYSQL_ROOT_PASSWORD: tbgCircle123
      - image: redis:7.0
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN

    steps:
      - checkout

      - restore_cache:
          keys:
            - composer-v1-{{ checksum "composer.lock" }}

      - run: composer install --no-interaction

      - run: composer check-platform-reqs

      - save_cache:
          paths:
            - vendor
          key: composer-v1-{{ checksum "composer.lock" }}

      - run: composer run lint:check

      - run: composer run sa:check

      - run: composer run test

      - run: vendor/bin/doctrine-migrations migrate --no-interaction --allow-no-migration --verbose

      # Ensures schema is in sync and implicitly that future migration diffs should work.
      # Deliberately doesn't use `doctrine:validate` because it clears caches (which CI doesn't need)
      # including the local test DB (which CI doesn't have).
      - run: vendor/bin/doctrine orm:validate-schema --verbose

      - run: ./matchbot matchbot:write-schema-files --check

      - run: composer run integration-test
      - run: composer run integration-test
      - run: composer run integration-test
      - run: composer run integration-test
      - run: composer run integration-test
      - run: composer run integration-test
      - run: composer run integration-test

      - store_test_results:
          path: reports

      - store_artifacts:
          path: reports

      - codecov/upload:
          files: 'coverage.xml,coverage-integration.xml'

  mutation_coverage:
    resource_class: large
    working_directory: /var/www/html
    docker:
      - image: thebiggive/php:dev-8.3
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN
        environment:
          MYSQL_HOST: 127.0.0.1
          MYSQL_SCHEMA: matchbot
          MYSQL_USER: root
          MYSQL_PASSWORD: tbgCircle123

          REDIS_HOST: 127.0.0.1
      - image: cimg/mysql:8.0
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN
        environment:
          MYSQL_DATABASE: matchbot
          MYSQL_ROOT_PASSWORD: tbgCircle123
      - image: redis:7.0
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN

    steps:
      - checkout

      - restore_cache:
          keys:
            - composer-v1-{{ checksum "composer.lock" }}

      - run: composer install --no-interaction

      - save_cache:
          paths:
            - vendor
          key: composer-v1-{{ checksum "composer.lock" }}

      - run:
          name: Mutation Test only changed and added files in PR
          command: |
            vendor/bin/infection --git-diff-filter=AM --git-diff-base=develop || true # there may be no changed covered PHP files.
            mv reports/mutation-testing reports/mutation-testing-changed-files || true # in which case the mv would also fail but we don't care.

      - run:
          name: Mutation Test all files
          command: |
            composer run mutation-test
            mv reports/mutation-testing reports/mutation-testing-all-files

      - store_artifacts:
          path: reports
workflows:
  build:
    jobs:
      - test:
          filters:
            branches:
              # These are the only long-lived branches, have their own workflow.
              ignore: [ 'main', 'develop', 'trunk']
          context:
            - docker-hub-creds
      - mutation_coverage:
          context:
            - docker-hub-creds
          requires:
            - test
  build-and-notify:
    jobs:
      - test:
          filters:
            branches:
              only: [ 'main', 'develop', 'trunk']
          context:
            - docker-hub-creds
            - jira
            - slack
          post-steps:
            - jira/notify:
                pipeline_id: << pipeline.id >>
                pipeline_number: << pipeline.number >>
                job_type: build
                environment_type: development
            - slack/notify:
                event: fail
                template: basic_fail_1
      - mutation_coverage:
          context:
            - docker-hub-creds
          requires:
            - test

  deploy-regression:
    jobs:
      - test:
          filters:
            branches:
              only:
                - develop
          context:
            - docker-hub-creds
      - aws-ecr/build_and_push_image:
          account_id: ${AWS_ECR_REGISTRY_ID}
          region: '${AWS_REGION}'
          context:
            - ecs-deploys
          requires:
            - test
          repo: '${AWS_ECR_REPO_NAME}'
          tag: 'regression,regression-${CIRCLE_SHA1}'
          auth:
            - aws-cli/setup:
                aws_access_key_id: AWS_ACCESS_KEY_ID
                aws_secret_access_key: AWS_SECRET_ACCESS_KEY
      - aws-ecs/deploy_service_update:
          name: 'Deploy Regression MatchBot web'
          context:
            - ecs-deploys
            - jira
            - slack
          requires:
            - aws-ecr/build_and_push_image
          family: 'tbg-regression-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX_WEB}'
          cluster: 'tbg-regression-${AWS_REGION}'
          container_image_name_updates: 'container=matchbot_web,tag=regression-${CIRCLE_SHA1}'
          auth:
            - aws-cli/setup:
                aws_access_key_id: AWS_ACCESS_KEY_ID
                aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          post-steps:
            - jira/notify:
                pipeline_id: << pipeline.id >>
                pipeline_number: << pipeline.number >>
                job_type: deployment
            - slack/notify:
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Regression: Matchbot deployed!* All visitors should see the updated app version within 30 minutes."
                          }
                        ]
                      }
                    ]
                  }
            - slack/notify:
                event: fail
                template: basic_fail_1
      - aws-ecs/deploy_service_update:
          name: 'Deploy Regression MatchBot consumer task'
          context:
            - ecs-deploys
            - slack
          requires:
            - aws-ecr/build_and_push_image
          family: 'tbg-regression-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX_TASKS}-consumer'
          service_name: 'tbg-regression-${AWS_REGION}-matchbot-consumer-tasks'
          cluster: 'tbg-regression-${AWS_REGION}'
          container_image_name_updates: 'container=matchbot_tasks,tag=regression-${CIRCLE_SHA1}'
          auth:
            - aws-cli/setup:
                aws_access_key_id: AWS_ACCESS_KEY_ID
                aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          post-steps:
            - slack/notify:
                event: fail
                template: basic_fail_1
            - slack/notify:
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Regression: MatchBot consumer task deployed!*"
                          }
                        ]
                      }
                    ]
                  }


  deploy-staging:
    jobs:
      - test:
          filters:
            branches:
              only:
                - develop
          context:
            - docker-hub-creds
      - aws-ecr/build_and_push_image:
          account_id: ${AWS_ECR_REGISTRY_ID}
          region: '${AWS_REGION}'
          context:
            - ecs-deploys
          requires:
            - test
          repo: '${AWS_ECR_REPO_NAME}'
          tag: 'staging,staging-${CIRCLE_SHA1}'
          auth:
            - aws-cli/setup:
                aws_access_key_id: AWS_ACCESS_KEY_ID
                aws_secret_access_key: AWS_SECRET_ACCESS_KEY
      - aws-ecs/deploy_service_update:
          name: 'Deploy Staging MatchBot web'
          context:
            - ecs-deploys
            - jira
            - slack
          requires:
            - aws-ecr/build_and_push_image
          family: 'tbg-staging-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX_WEB}'
          cluster: 'tbg-staging-${AWS_REGION}'
          container_image_name_updates: 'container=matchbot_web,tag=staging-${CIRCLE_SHA1}'
          auth:
            - aws-cli/setup:
                aws_access_key_id: AWS_ACCESS_KEY_ID
                aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          post-steps:
            - slack/notify:
                event: fail
                template: basic_fail_1
            - jira/notify:
                pipeline_id: << pipeline.id >>
                pipeline_number: << pipeline.number >>
                job_type: deployment
                environment: Staging
                environment_type: staging
            - slack/notify:
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Staging: Matchbot deployed!* All visitors should see the updated app version within 30 minutes."
                          }
                        ]
                      }
                    ]
                  }
      - aws-ecs/deploy_service_update:
          name: 'Deploy Staging MatchBot consumer task'
          context:
            - ecs-deploys
            - slack
          requires:
            - aws-ecr/build_and_push_image
          family: 'tbg-staging-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX_TASKS}-consumer'
          service_name: 'tbg-staging-${AWS_REGION}-matchbot-consumer-tasks'
          cluster: 'tbg-staging-${AWS_REGION}'
          container_image_name_updates: 'container=matchbot_tasks,tag=staging-${CIRCLE_SHA1}'
          auth:
            - aws-cli/setup:
                aws_access_key_id: AWS_ACCESS_KEY_ID
                aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          post-steps:
            - slack/notify:
                event: fail
                template: basic_fail_1
            - slack/notify:
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Staging: MatchBot consumer task deployed!*"
                          }
                        ]
                      }
                    ]
                  }

  deploy-production:
    jobs:
      - test:
          filters:
            branches:
              only:
                - main
          context:
            - docker-hub-creds
      - aws-ecr/build_and_push_image:
          account_id: ${AWS_ECR_REGISTRY_ID}
          context:
            - ecs-deploys
          requires:
            - test
          repo: '${AWS_ECR_REPO_NAME}'
          tag: 'production,production-${CIRCLE_SHA1}'
          region: '${AWS_REGION}'
          auth:
            - aws-cli/setup:
                aws_access_key_id: AWS_ACCESS_KEY_ID
                aws_secret_access_key: AWS_SECRET_ACCESS_KEY
      - aws-ecs/deploy_service_update:
          name: 'Deploy Production MatchBot web'
          context:
            - ecs-deploys
            - jira
            - slack
          requires:
            - aws-ecr/build_and_push_image
          family: 'tbg-production-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX_WEB}'
          cluster: 'tbg-production-${AWS_REGION}'
          container_image_name_updates: 'container=matchbot_web,tag=production-${CIRCLE_SHA1}'
          auth:
            - aws-cli/setup:
                aws_access_key_id: AWS_ACCESS_KEY_ID
                aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          post-steps:
            - slack/notify:
                event: fail
                template: basic_fail_1
            - jira/notify:
                pipeline_id: << pipeline.id >>
                pipeline_number: << pipeline.number >>
                job_type: deployment
                environment: Production
                environment_type: production
            - slack/notify:
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Production: Matchbot deployed!* All visitors should see the updated app version within 30 minutes."
                          }
                        ]
                      }
                    ]
                  }
      - aws-ecs/deploy_service_update:
          name: 'Deploy Production MatchBot consumer task'
          context:
            - ecs-deploys
            - slack
          requires:
            - aws-ecr/build_and_push_image
          family: 'tbg-production-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX_TASKS}-consumer'
          service_name: 'tbg-production-${AWS_REGION}-matchbot-consumer-tasks'
          cluster: 'tbg-production-${AWS_REGION}'
          container_image_name_updates: 'container=matchbot_tasks,tag=production-${CIRCLE_SHA1}'
          auth:
            - aws-cli/setup:
                aws_access_key_id: AWS_ACCESS_KEY_ID
                aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          post-steps:
            - slack/notify:
                event: fail
                template: basic_fail_1
            - slack/notify:
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Production: MatchBot consumer task deployed!*"
                          }
                        ]
                      }
                    ]
                  }
